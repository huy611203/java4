package poly.edu.Servlet;

import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.persistence.TypedQuery;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import poly.edu.model.*;

@WebServlet({"/Lab6", "/Lab6/SearchVid","/Lab6/SearchUser","/Lab6/SearchVidByF","/Lab6/SearchVidByCount","/Lab6/SearchVidByU","/Lab6/SearchVidByM","/Lab6/SearchVidByIM"})
public class Bai2 extends HttpServlet {
	private static final long serialVersionUID = 1L;
	EntityManagerFactory emf = Persistence.createEntityManagerFactory("lab6");
	EntityManager em = emf.createEntityManager();  
   
    public Bai2() {
        super();
    }
    public List<Videos> findByTitleContaining(String search) {
        String query = "SELECT v FROM Videos v WHERE title LIKE :search";
        TypedQuery<Videos> typedQuery = em.createQuery(query, Videos.class);
        typedQuery.setParameter("search", "%" + search + "%");
        return typedQuery.getResultList();
    }
//    public Users findById(String key) {
//    	Users users = em.find(Users.class, key);
//    	return users;
//    }
    public List<Users> findByVidId(String search) {
        String query = "SELECT v.user FROM Favorites v WHERE v.video.id = :vid";
        TypedQuery<Users> typedQuery = em.createQuery(query, Users.class);
        typedQuery.setParameter("vid",search);
        return typedQuery.getResultList();
    }
    private List<Videos> findVidByFavour(String favou) {
        String query ="";
        if(favou.equals("yes")) {
        	query = "SELECT o FROM Videos o WHERE o.Favorites IS NOT EMPTY";
        	}
        else {
        	query = "SELECT o FROM Videos o WHERE o.Favorites IS EMPTY";
		}

        TypedQuery<Videos> typedQuery = em.createQuery(query, Videos.class);
        return typedQuery.getResultList();
    }
    public List<Videos> findVidByUId(String search) {
        String query = "SELECT v.video FROM Favorites v WHERE v.user.id = :user";
        TypedQuery<Videos> typedQuery = em.createQuery(query, Videos.class);
        typedQuery.setParameter("user",search);
        return typedQuery.getResultList();
    }
    public List<Videos> findVidByM(String searchF,String searchT) {
    	SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
    	try {
			Date date1 = dateFormat.parse(searchF);
			Date date2 = dateFormat.parse(searchT);
			String query = "SELECT v.video FROM Favorites v WHERE v.LikeDate BETWEEN :min AND :max";
	        TypedQuery<Videos> typedQuery = em.createQuery(query, Videos.class);
	        typedQuery.setParameter("min", date1);
	        typedQuery.setParameter("max", date2);
	        return typedQuery.getResultList();
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return null;
		}
    	
    }
    public List<Videos> findVidByUINM(List<Integer> search) {
    	try {
    		String query = "SELECT v.video FROM Favorites v WHERE month(v.LikeDate) IN (:month)";
            TypedQuery<Videos> typedQuery = em.createQuery(query, Videos.class);
            typedQuery.setParameter("month",search);
            return typedQuery.getResultList();
    	}catch (Exception e) {
    		e.printStackTrace();
			return null;
		}
        
    }
//    private List<Report> findByFCContaining() {
//        String query = "SELECT new Report(o.video.id, count(o)) "
//        		+ " FROM Favorites o "
//        		+ " GROUP BY o.video.id";
//        TypedQuery<Report> typedQuery = em.createQuery(query, Report.class);
//        return typedQuery.getResultList();
//    }
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		request.setCharacterEncoding("utf-8");

	    response.setCharacterEncoding("utf-8");
		response.getWriter().append("Served at: ").append(request.getContextPath());
		
		request.getRequestDispatcher("/view/view.jsp").forward(request, response);
	}

	
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		request.setCharacterEncoding("utf-8");
	    response.setCharacterEncoding("utf-8");
		String uri = request.getRequestURI();
		String favorite = request.getParameter("thichh");

		if(uri.contains("SearchVidByF")) {
			System.out.println(favorite);
			List<Videos> videofs = findVidByFavour(favorite);
			request.setAttribute("videofs",videofs);
			
//		}else if (uri.contains("SearchVidByCount")){
//			List<Report> rps = findByFCContaining();
//			request.setAttribute("rps",rps);
			
		}else if (uri.contains("SearchVid")){
			String title = request.getParameter("searchvid");
			Users user = findById(title);
			request.setAttribute("videoss", user);
		}else if (uri.contains("SearchUser")){
			String vidid = request.getParameter("searchUserByVid");
			System.out.println(vidid);
			List<Users> users = findByVidId(vidid);
			request.setAttribute("users",users);
		
		}
		else {
			System.out.println("sai");
		}
		
		if (uri.contains("SearchVidByU")){
			String vididi = request.getParameter("searchvivi");
			System.out.println(vididi);
			List<Videos> vivi = findVidByUId(vididi);
			request.setAttribute("vivis",vivi);
		}if (uri.contains("SearchVidByM")){
			String vimf = request.getParameter("searchvimf");
			String vimt = request.getParameter("searchvimt");
			List<Videos> vivim = findVidByM(vimf,vimt);
			request.setAttribute("vivims",vivim);
		}
		if (uri.contains("SearchVidByIM")){
			String[] values = request.getParameterValues("month");
			List<Integer> months = new ArrayList<Integer>();
			for(String month: values) {
				months.add(Integer.valueOf(month));
			}
			System.out.println(months);
			List<Videos> vivimm = findVidByUINM(months);
			request.setAttribute("vivimms",vivimm);
		}else {
			System.out.println("Haiz");
		}
		
		request.getRequestDispatcher("/view/view.jsp").forward(request, response);
	}

}
